<html>
<head>
    <style>
        .col20p{
            width: 20%;
        }
        .col80p{
            width: 80%;
        }
        .col20p,
        .col80p{
            float: left;
            padding: 5px;
            -moz-box-sizing: border-box; 
            -webkit-box-sizing: border-box; 
            box-sizing: border-box;
        }
        .row{
            margin: 0 -5px;
        }
        .friend-message{
            text-align: left;
        }
        .my-message{
            text-align: right;
        }
        .chat-content{
            width: 100%;
            border: 5px solid #EDEDED;
            -moz-box-sizing: border-box; 
            -webkit-box-sizing: border-box; 
            box-sizing: border-box;
        }
        .chat-content>.chat-name{
            padding: 5px;
            font-size: 30px;
            font-weight: bold;
            background-color: #EDEDED;
            min-height: 40px;
            display: flex;
            align-items: center;
        }
        .chat-content>.chat-message{
            min-height: 300px;
            overflow-y: scroll;
        }
        .user-online{
            width: 100%;
            border: 5px solid #EDEDED;
            float: left;
            -moz-box-sizing: border-box; 
            -webkit-box-sizing: border-box; 
            box-sizing: border-box;
        }
        .user-online>.user-count{
            padding: 5px;
            font-size: 20px;
            font-weight: bold;
            background-color: #EDEDED;
            min-height: 40px;
            display: flex;
            align-items: center;
        }
        .user-online>.user-list>.item{
            font-size: 15px;
            padding: 5px;

        }
        .user-online>.user-list>.item:hover{
            background-color: #EDEDED;
        }
    </style>
</head>
<body>
<%= Array.isArray(userOnline) %>
<center><h1>WELLCOME TO CHAT ROOM</h1></center>
<div class="row">
    <div class="col80p">
        <div id="chat-content" class="chat-content active">
            <div class="chat-name">
                
            </div>
            <div class="chat-message">
            </div>
            <div class="chat-input">
                <input type="text" name="" id="message-input" /><button id="send">Send</button>
            </div>
        </div>
    </div>
    <div class="col20p">
        <div id="user-online" class="user-online">
            <div class="user-count">
                User (<span id="number"><%= userOnline.length %></span>) 
            </div>
            <div class="user-list" id="user-list">
                <% for(var i=0; i<userOnline.length; i++){ %>
                <div class="item" id="<%= userOnline[i].name %>">
                    <%= userOnline[i].name %>
                </div>
                <% } %>
            </div>
        </div>
    </div>
</div>
</body>

<script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"></script>

<script>
    var current = null
    var userOnline = <%- JSON.stringify(userOnline) %>
    var socket = io("http://localhost:3000");

    const findUserIndex = (name) => {
        return userOnline.findIndex((user) => {
            return user.name == name
        })
    }
    const updateCountUserOnline = () => {
        $(".user-online>.user-count>#number").html(userOnline.length)
    }
    const addUser = (data) => {
        if(Array.isArray(data)){
            user = data.map((user) => {
                user.message = []
                return user
            })
            userOnline = userOnline.concat(user)
        }else if(data.constructor === Object){
            data.message = []
            userOnline.push(data)
        }
        updateCountUserOnline()
    }
    const removeUser = (name) => {
        const removeIndex = findUserIndex(name)
        userOnline.splice(removeIndex, 1)
        updateCountUserOnline()
    }
    const addMessage = (name, data) => {
        const index = findUserIndex(name)
        userOnline[index].message.push(data)
    }
    const writeMyMessage = (message) => {
        $(".chat-content>.chat-message").append(`<p class="my-message">${message}</p>`)
    }
    const writeFriendMessage = (message) => {
        $(".chat-content>.chat-message").append(`<p class="friend-message">${message}</p>`)
    }
    const setChatBox = (user) => {
        current = user.name
        $(".chat-content>.chat-name").html(user.name)
        $(".chat-content>.chat-message").empty()
        if(user.message.length > 0){
            user.message.forEach((item) => {
                if(item.name == "me"){
                    writeMyMessage(item.message)
                }else{
                    writeFriendMessage(item.message)
                }
            })
        }
        $(".chat-content>.chat-input>#message-input").val("")
        $(".chat-content>.chat-input>#message-input").attr("name", user.name)
    }
    $(document).ready(() => {
        userOnline = userOnline.map((user) => {
                user.message = []
                return user
        })
        if(userOnline.length > 0){
            $(".chat-content").removeClass("active")
            setChatBox(userOnline[0])
        }
    })
    $(".user-online>.user-list>.item").on("click", (event) => {
        console.log("asdasdasd")
        const name = event.target.id
        const index = findUserIndex(name)
        setChatBox(userOnline[index])
    })
    $("#send").on("click", () => {
        var el = $(".chat-content>.chat-input>#message-input")
        var name = el.attr("name")
        var message = el.val()
        el.val("")
        const data = {
            name: name,
            message: message
        }
        addMessage(name, { name: "me", message: message})
        socket.emit("message", data)
        writeMyMessage(message)
    })
    socket.on("new-message", (data) => {
        addMessage(data.name, data)
        if(data.name == current){
            writeFriendMessage(data.message)
        }
    });
    socket.on("hasConnect", function(data){
        addUser(data)
        if(!current){
            setChatBox(userOnline[0])
        }
        $("#user-list").append(`<div class="item" id="${data.name}">${data.name}</div>`)
    })
    socket.on("hasDisconnect", (data) => {
        removeUser(data.name)
        $(`#user-list>#${data.name}`).remove()
        if(userOnline.length > 0){
            if(current == data.name){
                setChatBox(userOnline[0])
            }     
        }else{
            $(".chat-content").addClass("active")
        }      
    })
    socket.on("receiveUser", (data) => {
        //addUser(data)
    })
    //socket.emit("getUserOnline", "")
</script>
</html>